<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Roy Xue is Here :)</title>
    <description>Lazy Guy</description>
    <link>http://royxue.me/</link>
    <atom:link href="http://royxue.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 24 Jan 2015 12:58:10 +0800</pubDate>
    <lastBuildDate>Sat, 24 Jan 2015 12:58:10 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Blog: Monster Hunter 4G 狩猎日记</title>
        <description>&lt;p&gt;入手New 3DS LL和Monster Hunter 4G 大概两周多了. 刚刚打到村上位九星, Hunter Rank 5, 推倒了封面怪,好像这是第一次MH系列打了这么久. 顺便今天终于手指打到酸麻感了.&lt;/p&gt;

&lt;p&gt;New 3DS 10月份发售, 果断接着顺便学日语的想法入了日版机器, 打了一段时间发现, 其实就算不会日语也可以打的蛮顺畅, 照现在这个进度看, 怪猎怎么也还要打几百小时, 一时半会也不用买新卡带了.&lt;/p&gt;

&lt;p&gt;MH4出了两把新武器, 操虫棍和盾斧, 也是我狩猎至今的主力武器. 操虫棍属于比较灵活的, 不过虫喂养系统有点略麻烦, 需要计算好数值, 所以我至今都没怎么想过用虫炮流. 我用虫棍主要还是骑乘流, 依靠跳跃骑乘怪物, 然后倒地输出一波, 再骑乘…伤害很高, 至于盾斧嘛, 大招的浪漫, 找准时机, 一刀入魂, hmmm, 就算没打中姿势也是很帅的嘛…我觉得我估计是写不出来什么攻略的啦, 一懒二渣哈哈哈&lt;/p&gt;

&lt;p&gt;大概也是好久没有花这么多时间玩游戏了.&lt;/p&gt;

&lt;p&gt;=- =因为某些奇怪的叫做拖延症的病导致了忘记继续更新这个了…&lt;/p&gt;

&lt;p&gt;额, 现在已经村九星紧急, HR7, 一套封面怪套装了, 可想而知这两天我都干什么去了, 不过鉴于目前的难度来说, 估计还要在这个段位卡上一个月, 倒也是觉得是时候少玩一些了, 毕竟前几天玩的实在是太凶了.&lt;/p&gt;

&lt;p&gt;滚去写代码…&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Jan 2015 23:45:25 +0800</pubDate>
        <link>http://royxue.me/blog/having%20fun/monster-hunter-4g-e78ba9e78c8ee697a5e8aeb0</link>
        <guid isPermaLink="true">http://royxue.me/blog/having%20fun/monster-hunter-4g-e78ba9e78c8ee697a5e8aeb0</guid>
        
        <category>MH4G</category>
        
        
        <category>blog</category>
        
        <category>having fun</category>
        
      </item>
    
      <item>
        <title>Blog: さよなら　２０１４</title>
        <description>&lt;p&gt;本来打算圣诞节写点东西, 结果没想到一直拖延症到现在, 索性还是一起写了吧.&lt;/p&gt;

&lt;p&gt;去年的12月31号还是跑到广州塔下面的人山人海中, 听着大概也不准确的倒数, 没什么感觉地也就过去了. 今年还是不想再凑这种无聊的热闹了. 考完日语之后回来, 抱着白菜千万不要毕业的心情看完了紅白, 没有毕业发表实在是太好了…&lt;/p&gt;

&lt;p&gt;最后一天必然都是写总结的节奏, 虽然这种东西总是不知道应该从何说起, 然后说些什么.&lt;/p&gt;

&lt;p&gt;若果要用一个词来形容2014这一年, 我想忙应该是最贴切的了. 和去年的自己相比, 有了更多的事情做, 更多的东西学, 不再像以前花很多时间去想一些有关未来的假设. 很多时候总是在想等着一段事情结束了就好好休息一下, 然后这一段将要结束的时候, 另一段已经开始了, 于是也只能连续不断的忙碌.&lt;/p&gt;

&lt;p&gt;2014这一年, 发生了很多事情, 也有蛮多遗憾的.&lt;/p&gt;

&lt;p&gt;去CMU上了Summer School.
参加了Google Summer of Code, 开始持续为开源项目贡献代码.
组织了中国第一次的GSoC Meetup.
花自己赚的钱, 一个人去美国转了一大圈, 参观了喜欢的硅谷公司.
喜欢上了AKB48, 也开始学了日语.
参加了几次Hackathon, 做了一些很好玩的东西.
拿到了日本的Internship Offer.
完成了Master的申请.
参加了家里两个表哥的婚礼.&lt;/p&gt;

&lt;p&gt;在年底的时间完成了申请, 拿到了Offer, 然后等申请结果和Visa结果, 也算是自己对过去一段时间交出的一份答卷, 只是我也不知道最后的得分会是多少, 至少是拼尽全力做过了. 也已经可以接受或好或坏的结果了.&lt;/p&gt;

&lt;p&gt;一年来, 更加明白了勇气的重要. 去探索这个世界的勇气, 毕竟有太多的事情没有做过, 不试试怎么知道. 大概也是因为我总是盲目乐观吧, 但是, 至少现在来看, 不管是成功还是失败, 都让我得以成长. 不过明白了再多的道理, 我觉得我还是想像个孩子一样生活, 凡事, 开心就好, 不必要想那么多复杂的东西.&lt;/p&gt;

&lt;p&gt;最后, 谢谢这一年来所有给过我帮助的人们, 是你们让我成为了现在的我.&lt;/p&gt;

&lt;p&gt;新的一年, 计划什么的还是不说了, 免得明年今日看到的时候后悔.&lt;/p&gt;

&lt;p&gt;要努力变成自己想成为的人.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 01:49:55 +0800</pubDate>
        <link>http://royxue.me/blog/life/e38195e38288e381aae38289e38080efbc92efbc90efbc91efbc94</link>
        <guid isPermaLink="true">http://royxue.me/blog/life/e38195e38288e381aae38289e38080efbc92efbc90efbc91efbc94</guid>
        
        
        <category>blog</category>
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Blog: App ⎡鲜声⎦ 上线</title>
        <description>&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;http://a775.phobos.apple.com/us/r30/Purple3/v4/bf/ad/8a/bfad8a60-ee06-b45a-0257-73997b891f13/AppIcon60x60_U00402x.png&quot; alt=&quot;&quot; /&gt;
&lt;strong&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/xian-sheng-zui-qing-liang/id950507970?mt=8&quot;&gt;鲜声&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;之前大概总共花了一周多时间完成的应用终于上线了. 也是第一次单独完成App后端开发方面的项目. 整个过程其实还蛮好玩的, 虽然我做的部分用户实际也看不到. 想想也只听过交互很赞, 设计很棒, 但是却极少有人说后台很快, 很稳定什么的…&lt;/p&gt;

&lt;p&gt;工程量其实不是很大, 主要是写好后端处理逻辑, RESTful API, 管理后台, 几个爬虫,和iOS端对接. 管理后台的css和js大概算是纠结的最多的地方了. 因为人不够用, 所以作为后端的我也要写前端, 之前前端接触的比较少, 这一部分纠结的时间还是挺久的. 主要是看了一些Bootstrap和javascript. 感觉一套做完下来, 对于前后端交互和后端的处理有了更深的了解和体会. 加上又写了不少爬虫(绝对不告诉你是干吗用的)(我觉得我Github快可以开爬虫collection了,哈哈). 大致上这个过程属于从1到2这一步, 学到了很多东西, 解决了自己挖的很多坑. 当然也有一些地方, 因为找不到很好的解决逻辑(还有因为不想改数据库), 所以留了一些比较”脏”的代码, 希望以后有机会的话, 能对这些地方优化一下. 至于以后的话, 还是觉得能用Lean Cloud这样的服务来实现最好就用了, 因为我懒呗~&lt;/p&gt;

&lt;p&gt;顺便提一句, 终于切身体会到了万恶的”改需求”, 尤其是在一期的时候推翻原始的设计文档, 改需求改到要动数据库的时候, 确实很烦, 真是想天天挂”再改一个需求试试!”当头像. 不过我还算好的, iOS小哥在提交前夕, 还被要求改了七八遍, 直接导致了提交延期和一些负面情绪…&lt;/p&gt;

&lt;p&gt;再回来说说App, App的定位是轻量级阅读, 那么本身的架构其实不是很复杂, 整体设计也是走了简洁的风格. 有一些设计好的功能一期还没有时间完全实现, 估计要推迟到二三四五期了. 这种App的受欢迎程度大概和技术方面关系不大, 主要还是看运营和内容. 不过说到内容, 我觉得最终呈现出来的和我自己预想的之间还是有很大差距的, 毕竟这也不是我所能决定的.&lt;/p&gt;

&lt;p&gt;最后的最后还是喜欢jiffy这个名字哈哈.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Dec 2014 00:24:28 +0800</pubDate>
        <link>http://royxue.me/blog/app-e28ea1e9b29ce5a3b0e28ea6-e4b88ae7babf</link>
        <guid isPermaLink="true">http://royxue.me/blog/app-e28ea1e9b29ce5a3b0e28ea6-e4b88ae7babf</guid>
        
        <category>django</category>
        
        <category>iOS</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Blog: Tricks inside Python Loop</title>
        <description>&lt;p&gt;Jump out from multi For loops in Python&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Writing too many layers of for loops is definitely a bad habit. However, sometimes under specific problem, we have no choices but use this method.&lt;/p&gt;

&lt;p&gt;There is no “goto” method in python, so it will be difficult to deal with multi layers “for” loops.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;for i in range(5):
    for z in range(5):
        for c in range(5):
            if z &amp;gt; c:
                print z, c
                break
        else:continue 
        break
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we can use ‘else’ inside for/while loop, after each loop, it will run ‘else’. But if inside the loop, there is “break”, after this loop, it will skip ‘else’, this time another ‘break’ under else works, so that we can jump out the second layer loop.&lt;/p&gt;

&lt;p&gt;This method is very useful when we cannot avoid using too many loops with if and “goto”.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Dec 2014 00:25:11 +0800</pubDate>
        <link>http://royxue.me/blog/python/tricks-inside-python-loop</link>
        <guid isPermaLink="true">http://royxue.me/blog/python/tricks-inside-python-loop</guid>
        
        <category>python</category>
        
        
        <category>blog</category>
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Blog: Theano Update log 1120</title>
        <description>&lt;p&gt;The if/else crash in memory profiler is fixed.&lt;/p&gt;

&lt;p&gt;Another part is add CPU/GPU memory usage calculating support. In previous version, the memory usage is only sum value, in order to make more information avaiable, so we add CPU/GPU separate memory usage information support. This part is quite simple, when we are calculating each variable, check its type first, if it is CudaNdarray or not.&lt;/p&gt;

&lt;p&gt;Also, for the memory usage information, the CPU and GPU will share a list like [CPU, GPU], choosing this way to store the value is to make it flexible when we implement multi GPU later.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Nov 2014 00:05:26 +0800</pubDate>
        <link>http://royxue.me/blog/theano/theano-update-log-1120</link>
        <guid isPermaLink="true">http://royxue.me/blog/theano/theano-update-log-1120</guid>
        
        <category>Theano</category>
        
        
        <category>blog</category>
        
        <category>theano</category>
        
      </item>
    
      <item>
        <title>Blog: Getting Start with Django/PostgreSQL on Heroku</title>
        <description>&lt;h3 id=&quot;getting-start-with-djangopostgresql-on-heroku&quot;&gt;Getting Start with Django/PostgreSQL on Heroku&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;This weekend I will enjoy my hackathon, what my team decide to do is a XXX application, to finish this, one thing we need is free server to deploy our django project. Finally, I choose the heroku, which is free, powerful, and convenient, based on git.&lt;/p&gt;

&lt;p&gt;Although after reading the getting started python, it seems that deploying is really easy to complete, actually, there are traps if your projects are not using sqlite as the demo, however, postgresql is why we use Heroku.&lt;/p&gt;

&lt;p&gt;Whatever, let’s start:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install the heroku-toolbelt, it’s very convenient to when you are using Heroku, well, dont install heroku-toolbelt by brew, because by this you wont install foreman at the same time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a useful requirements.txt, that’s what make sure that your projects can run well on Heroku server, there are some modules you must add in that file:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt; Django (haha, you should have this)
 psycopg2
 dj-database-url==0.3.0
 dj-static==0.0.6
 django-toolbelt==0.0.1
 gunicorn==19.0.0
 static3==0.5.1
 wsgiref==0.1.2
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;for your django settings.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt; DATABASES[&#39;default&#39;] =  dj_database_url.config()
 # set Database info on Heroku server
 STATIC_ROOT = &#39;staticfiles&#39;
 STATIC_URL = &#39;/static/&#39;
 STATICFILES_DIRS = (os.path.join(BASE_DIR, &#39;../static&#39;),)
 #set where to store the static files
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if you wanna use DEBUG mode in Django, add a config like HEROKU_ENV on Heroku to turn DEBUG on/off at online/offline. Add that like this “heroku set:config HEROKU_ENV=TRUE&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;After git push heroku master, dont forget to set your database&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt; heroku run python manage.py syncdb
 heroku run python manage.py migrate(if with south&amp;amp;tastypie)
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Aha, the last step “heroku open”! see your website welcome page!&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 19 Nov 2014 21:50:27 +0800</pubDate>
        <link>http://royxue.me/blog/dev/python/getting-start-djangopostgresql-heroku</link>
        <guid isPermaLink="true">http://royxue.me/blog/dev/python/getting-start-djangopostgresql-heroku</guid>
        
        <category>django</category>
        
        
        <category>blog</category>
        
        <category>dev</category>
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Blog: HackShanghai Diary</title>
        <description>&lt;p&gt;Just wake up from a more than 10 hours sleeping.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shanghai&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I remember last time I went to Shanghai is when I graduated from high school. Now, Shanghai really changed a lot, and comparing to Guangzhou, is much more beautiful and clean, which makes Guanzhou looks like sub city area.&lt;/p&gt;

&lt;p&gt;Aha, I also met some of my old friends in Shanghai. For one, I havent seen her for almost 6 or 7 years, however, it just feels like old days came back, we didnt change too much, but we are not who we were. That’s how time goes by, I guess.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NYU&amp;amp;Staffs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks to the organization team and sponsors. I enjoyed myself during the HackShanghai, it would be great memory in my life.&lt;/p&gt;

&lt;p&gt;The campus of NYU Shanghai is really beautiful and modern, I like it more than my SCUT campus haha, also during the whole hackathon the staffs provide snacks and drink to gain energy, I think I just ate too much during the 24 hours, haha.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HooCal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is our project name, &lt;strong&gt;“HooCal”&lt;/strong&gt;, which combines the “Hook” and “Calendar”. It is a Massively Multiplayer Role Playing Calendar, (aha, just kidding). Actually it is a calendar-based SNS driven by events.&lt;/p&gt;

&lt;p&gt;It has features as following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Users can create public events and then share it via QRcode and email.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Users can subscribe some specific events/users via searching some tags/themes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Users with the same interests can form an organization which they can work together to create/edit specifc events.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;By using Moxtra SDK, the system will automatically create a real-time chat room for each events, users who subscribe this event can talk/share files/add to-do tasks of this events.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Companies can own their official accounts to create events with higher quality and accuracy. Also, this is the bussiness pattern we wanna do.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For future vision, with sufficient amount users we can play some machine learning/data mining algo, build a recommodation system.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though HooCal has some similarity with Google Calendar or something else, but what we wanna make is not just a tool, but a social network, a community. Also, now in China, only a few people have habits of using calendar, what we wanna do is users can grow a habit of using calendar in daily life by our product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We won the Moxtra prize, which is for the best team using Moxtra SDK, and we got some pebble watches, and 6 months mentorship from Moxtra CTO Stanley Huang, I think it would be a great chance to learning something. On the other hand, Moxtra SDK is really convenient if you wanna build a system with real-time interacting like meeting or anything else, that’s why we choose to use it in our projects.&lt;/p&gt;

&lt;p&gt;For other results, some participates are not satisfied with them. Like one guy said hangry(hungry plus angry), using hardware has more advantages than pure software. Even a simple CNN based product is rewarded, which can be built in half an hour if you know deep learning. However, we are not judges, right? The judges are managers in sponsor company, so maybe they have been away from the frontier of Tech for a long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SNH48&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I should have write something about this, haha.&lt;/p&gt;

&lt;p&gt;However I dont know how to describe it. To be honest I dont like the XXX Chinese Songs. I prefer the original Japanese songs more. Whatever, the SNH48 show is really interesting. Maybe I will go there next time when I go to Shanghai.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Nov 2014 15:42:13 +0800</pubDate>
        <link>http://royxue.me/blog/dev/life/hackshanghai-diary</link>
        <guid isPermaLink="true">http://royxue.me/blog/dev/life/hackshanghai-diary</guid>
        
        <category>hackathon</category>
        
        
        <category>blog</category>
        
        <category>dev</category>
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Blog: MySQL初体验</title>
        <description>&lt;h3 id=&quot;mysql&quot;&gt;MySQL初体验&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;hmmmmm&lt;/p&gt;

&lt;p&gt;最近因为研究需要, 开始要用MySQL了. 本来决定下周的Hackathon也用MySQL配合django进行开发. 不过最后还是决定那边先用PostgreSQL.&lt;/p&gt;

&lt;h4 id=&quot;mac-osx-installation&quot;&gt;1. Mac OSX Installation&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;brew install mysql
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一行安装完毕, 然后输入”mysql.server start”启动mysql的服务器.
“mysql -uroot -p”“登入
使用”show databases” 就可以看到数据库的列表了.&lt;/p&gt;

&lt;h4 id=&quot;using-python-with-mysql&quot;&gt;2. Using Python with MySQL&lt;/h4&gt;

&lt;p&gt;下载 &lt;a href=&quot;http://sourceforge.net/projects/mysql-python/&quot;&gt;MySQLdb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;修改site.cfg配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;#mysql_config = /usr/local/bin/mysql_config 将#去掉
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在解压目录下运行 “python setup.py build”&lt;/p&gt;

&lt;p&gt;之后 “sudo python setup.py install”, 安装MySQLdb&lt;/p&gt;

&lt;h4 id=&quot;sequel-pro&quot;&gt;3. Sequel Pro&lt;/h4&gt;

&lt;p&gt;Just use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;brew cask install sequel-pro
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sequel-Pro 是数据库管理的软件, 可以直观快捷地查看数据库内容.&lt;/p&gt;

&lt;h4 id=&quot;basic-action&quot;&gt;4. Basic Action&lt;/h4&gt;

&lt;p&gt;Using MySQLdb with Python&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;code&amp;gt;import MySQLdb

conn = MySQLdb.connect(host=&#39;localhost&#39;, user=&#39;root&#39;, passwd=&#39;&#39;, db=&#39;bla&#39;)

t = conn.cursor()

# SELECT
t.execute(&#39;SELECT * FROM bla&#39;)
t.fetchone() 
t.fetchall()

# INSERT
t.execute(&#39;INSERT INTO bla (num) VALUES(2)&#39;)
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for more: &lt;a href=&quot;http://www.tutorialspoint.com/python/python_database_access.htm&quot;&gt;MySQLdb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先去跑scripts去了 T T&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Nov 2014 17:58:11 +0800</pubDate>
        <link>http://royxue.me/blog/dev/mysqle5889de4bd93e9aa8c</link>
        <guid isPermaLink="true">http://royxue.me/blog/dev/mysqle5889de4bd93e9aa8c</guid>
        
        
        <category>blog</category>
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Blog: Theano Update Log #2226</title>
        <description>&lt;p&gt;&lt;strong&gt;Theano Update Log #2226&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This week I mainly implement a new faster algorithm for counting the min peak.&lt;/p&gt;

&lt;p&gt;When the node number increase, the recursive way also increases a lot, even we have already done the executable_set part. So what we need to do is to find a more efficient way to reduce the back track times.&lt;/p&gt;

&lt;p&gt;This week what we do is using DONE_SET. DONE_SET: a set store executed nodes DONE_DICT: store the DONE_SET and its memory usage&lt;/p&gt;

&lt;p&gt;The mainly idea is that when we execute a node, we add it to the DONE_SET, then we check if the DONE_SET is in the DONE_DICT or not. Attentions: here the set obejct is not hashable, we cannot use it as dict’s key, so we use frozenset() to transfer the set to frozenset as the frozenset is hashable and can be used as a key.&lt;/p&gt;

&lt;p&gt;If not in DONE_DICT, update the DONE_DICT. If yes, continue to check if the previous DONE_SET memory usage is bigger than the current memory usage. True, then we update the memory usage in DONE_DICT to current memory usage. False, remove the node from DONE_SET and stop this iteration, move to next node in executable_node.&lt;/p&gt;

&lt;p&gt;The algo is definitely faster, but now there remains another question, I ran the logistic_cg for several times, and I got different results. This means that during the computing process we miss some possibility and the real min peak.&lt;/p&gt;

&lt;p&gt;The next step is to think about how to get the accurate result.&lt;/p&gt;

&lt;h1 id=&quot;update-in-1st-nov&quot;&gt;Update in 1st Nov.&lt;/h1&gt;

&lt;p&gt;Previous problem solved. By using the max_mem_count to take place of mem_count.&lt;/p&gt;

&lt;p&gt;Also using a better if in new version, clean up duplicated code, make it more beautiful :)&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Oct 2014 11:24:34 +0800</pubDate>
        <link>http://royxue.me/blog/theano/theano-update-log-2226</link>
        <guid isPermaLink="true">http://royxue.me/blog/theano/theano-update-log-2226</guid>
        
        <category>Theano</category>
        
        
        <category>blog</category>
        
        <category>theano</category>
        
      </item>
    
      <item>
        <title>Blog: C...</title>
        <description>&lt;p&gt;It seems like the last time I write C language is in the Summer after Grade 1, for the class final project. It’s really a long time that I almost forget all the stuff I learnt.&lt;/p&gt;

&lt;p&gt;Well, I choose a new class, Software Security, it’s mainly based on C, so I think maybe it will be great chance for me to recall the memory of C. Aha&lt;/p&gt;

&lt;p&gt;This time I will mainly use vim + gcc to finish the whole class and projects.&lt;/p&gt;

&lt;p&gt;Aha. Go!&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Oct 2014 00:14:03 +0800</pubDate>
        <link>http://royxue.me/blog/dev/c</link>
        <guid isPermaLink="true">http://royxue.me/blog/dev/c</guid>
        
        <category>en_US</category>
        
        
        <category>blog</category>
        
        <category>dev</category>
        
      </item>
    
  </channel>
</rss>
